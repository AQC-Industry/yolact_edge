# ----- L4T_IMAGE ------
# Specify an image with the same tag as your host's Jetpack version.
# [Example]
# $ cat /etc/nv_tegra_release 
# >> R32 (release), REVISION: 5.0, GCID: 25531747, BOARD: t186ref, EABI: aarch64, DATE: Fri Jan 15 23:21:05 UTC 2021
# In this case, use r32.5.0
# (ex. use r32.5.0) 
# $ docker build --build-arg L4T_IMAGE=nvcr.io/nvidia/l4t-pytorch:r32.5.0-pth1.6-py3

# ----- JETSON_PLATFORM -----
# <platform> identifies the platformâ€™s processor:
# t186 for Jetson TX2 series
# t194 for Jetson AGX Xavier series or Jetson Xavier NX
# t210 for Jetson Nano devices or Jetson TX1
# (ex. In this case, use AGX Xavier) 
# $ docker build --build-arg L4T_IMAGE=nvcr.io/nvidia/l4t-pytorch:r32.5.0-pth1.6-py3 --build-arg JETSON_PLATFORM=t194

ARG L4T_IMAGE=nvcr.io/nvidia/l4t-pytorch:r32.7.1-pth1.10-py3
ARG JETSON_PLATFORM=t194

FROM ${L4T_IMAGE}

ARG L4T_IMAGE
ARG JETSON_PLATFORM

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install --no-install-recommends -y gnupg2 curl ca-certificates && \
    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN L4T_REPO_VERSION=`python3 -c 'import sys; print(".".join((sys.argv[1].split(":")[-1]).split("-")[0].split(".")[:2]))' ${L4T_IMAGE}` &&\
    touch /etc/apt/sources.list.d/nvidia-l4t-apt-source.list &&\
    echo "deb https://repo.download.nvidia.com/jetson/common ${L4T_REPO_VERSION} main" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list &&\
    echo "deb https://repo.download.nvidia.com/jetson/${JETSON_PLATFORM} ${L4T_REPO_VERSION} main" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list &&\
    curl -fsSL https://repo.download.nvidia.com/jetson/jetson-ota-public.asc | apt-key add - &&\
    apt-get update && \
    apt-get install --no-install-recommends -y build-essential make cmake cmake-curses-gui unzip \
                        git g++ pkg-config curl \
                        python3-dev python3-testresources python3-pip \
                        python3-numpy python3-tk ffmpeg libsm6 libxext6 \
                        libopencv-python libopencv-dev && \
    apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*
RUN ln -svf /usr/bin/python3 /usr/bin/python
RUN python -m pip install --upgrade --force pip

# Install dependencies
RUN pip install cython pillow matplotlib GitPython termcolor tensorboard
RUN pip install git+https://github.com/haotian-liu/cocoapi.git#"egg=pycocotools&subdirectory=PythonAPI"

# torch2trt_dynamic
WORKDIR /root
RUN git clone https://github.com/grimoire/torch2trt_dynamic.git torch2trt_dynamic
WORKDIR /root/torch2trt_dynamic
RUN python setup.py develop


# installing plugins
WORKDIR /root
RUN apt update && apt install -y software-properties-common && \
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \
    apt update && apt install -y cmake && \
    git clone --depth=1 https://github.com/grimoire/amirstan_plugin.git && \
    cd amirstan_plugin && \
    git submodule update --init --progress --depth=1 && \
    cmake -DTENSORRT_DIR=/usr/include/aarch64-linux-gnu  && \
    make -j$(nproc)

ENV AMIRSTAN_LIBRARY_PATH=/root/amirstan_plugin/lib

WORKDIR /workspace

ENV LANG C.UTF-8